#!/bin/bash
# lowsars-input: Lowsars program input preparing program
# Copyright Â© 2007 Yu Hang, released under GNU General Public License Version 2 or later

# ideas basically from lowsars-test version 0.2.0 alpha 3,
# some escape functions are prepared for lowsars
# the current lowsars-test is still using an older version of this
# this is in fact a script interpreter, which helps lowsars-test to do things safely
# but of course, it is slow, and is not a good choice for programming
# this version uses a lot of subshells!

show_version(){ echo "lowsars-input 0.2.0 alpha"; }
show_usage(){
echo "Usage: $0 [OPTIONS] [--] [OPERAND]...
  -c, --variable-change=filename write variable change script to file
  -C, --clean-environment        clear any variables begin with the namespace
  -d, --workdir=path             specify the directory to do everything in
  -f, --file=filename            write following results to the file
  -n, --namespace=string         specify the prefix of top level variables,
                                   lowsars_var_ by default
  -p, --processes=number         specify the maximum active process count
  -r, --rootdir=string           top level directory accessable for safe types,
                                   may have more than one
  -s, --safe                     denied any dangerous things, anything except
                                   sh and exec is considered safe, but usually
                                   should be used with -r to prevent file damage
  -u, --user=username            use the specified user to do dangerous things
  -v, --verbose                  print more infomations in stderr
      --help                     display this help and exit
      --version                  output version information and exit
generate the input files

operands are like: [%] TYPE [VARIABLE... ( PARAMETER[/][=TYPE]... )]
  [--PARAMETER[=VALUE]]... [-- DATA...] [SUBSCOPE] ;
where subscope is
  { [OPERAND]... }
anything can include \`OPERAND\` to subtitude the result there

specify the variable name to define
parameters are defined like \"% type name -- string\" in the current operand only
if it is defined with = or not defined, it should be followed by a string value
\"getvar variable -- name\" for links
add / for recursive define

available types:
  *cp                            read the file and copy the subscope
  *echo                          create the file containing the string data
  *null                          returns nothing
  *diff                          return the difference of two files or sub scope
  *root                          make the outer things invisible to inner scope,
                                   with something available specified
  *protect                       ignore variable changes from sub scope
  *add                           add anything together
  *file                          subtitude anything here with a file
  *namespace                     change the namespace
  *getvar                        get and excute variable from name
  *sh/bash                       excute the string data using bash
  *exec/COMMAND                  excute the command, with parameter data
  *curdir/COMMAND                same as exec/./COMMAND
  VARIABLE                       subtitude string in variable beginning with
                                   namespace_scope
type $0 --help=TYPE for more infomations"
}


#parameter parsing here


createthread(){
#createthread 'command' [scope]
#this should be used, to know the curpid, and more

#add request of thread here

{
  read CURRENT_PID <9
  trap 'read -a _TrapExcuteCommand<3; "${_TrapExcuteCommand[@]}"' sigusr1
  #sigusr1: excute a command in the target thread and scope
  [ "$2" != "" ]&&{
    read -n 1 <&4
    echo "-session{$2{$CURRENT_PID}}" >&8
    read -r <&9
  }
  eval "$1"
}&
echo "$!" >9

} 9<> >(:)
CURRENT_PID="$$"

#streams:
#0<subscope 1>result 5>&0 2>errors 6>verbose 7>details 4<commander-resource 8>sendcommand 9<commander-message
#3<command


#global variables:
#ls_problem, ls_case, ls_casesets(), ls_problemsets()
#ls_user, ls_tempdir, ls_ltparams()
#ls_name, ls_type(), ls_type[0] is the base * type

#ls_lt_input(), ls_lt_output, ls_lt_data(), ls_lt_answer
#ls_lt_source, ls_lt_excuteabledir, ls_lt_command, ls_lt_workdir

method:judge*case(){
ls_case="$ls_name"
while get >&5; do :;done
#echo "*case" >&9
lowsars-test -b "$ls_ltparams[@]" "$@" 2>&7|{ line;cat>&7;}
#short result support needed
}

method:judge*caseset(){
totalscore=0
totaltime=0.000
resultline=()
count=0
ls_ltparams=("${ls_ltparams[@]}" "$@")
ls_casesets=("${ls_casesets[@]}" "$ls_name")
while get >&5; do :; done
while read score time message; do
  resultline=("${resultline[@]}" "$message")
  ((totalscore+=score))
  totaltime="`echo "$totaltime+$time"|bc`"
done
#echo "*line" >&9
echo "$totalscore $totaltime" "${resultline[@]}"
echo "${ls_name:-$ls_problem}: $totalscore $totaltime" "${resultline[@]}" >&7
#short result or escape needed
}

method:judge*problem(){
ls_ltparams=("${ls_ltparams[@]}" "$@")
ls_problem="$ls_name"
while get; do :; done
#plain cat
}

method:judge*problemset(){
ls_ltparams=("${ls_ltparams[@]}" "$@")
ls_problemsets=("${ls_problemsets[@]}" "$ls_name")
echo "$ls_name:"
echo "===$ls_name===" 1>&7
while get; do :; done
}

method:judge*scope()
while get; do :; done

method:judge*add(){
#parameters are initial value for columns
total=("$@")
types=()
for ((i=1;i<=$#;i++)); do
  case "${!i}" in
    ""|*\ )types[i-1]=text;;
    *[!0-9.-]*|?*-*|*.*.*)types[i-1]=msg;;
    *.*)types[i-1]=real;;
    *)types[i-1]=int;;
  esac
done
#advanced escaping needed, to specify space separated or not, or how many fields
while get >&5; do :; done
while read -a current; do
  for ((i=0;i<$#;i++)); do
    case "${types[i]}" in
      text)total[i]="${total[i]}${current[i]} ";;
      msg)total[i]="${current[i]}";;
      real)case "${current[i]}" in
        ""|*[!0-9.-]*|?*-*|*.*.*);;
        *)total[i]="`echo "${total[i]}+${current[i]}"|bc`";;
      esac;;
      int)case "${current[i]}" in
        ""|*[!0-9.-]*|?*-*|*.*.*);;
        *)((total[i]+=${current[i]%.*}));;
      esac;;
    esac
  done
  [ "${types[$#-1]}" = "text" ]&&total[$#-1]="${total[$#-1]}${current[*]:$#}"
done
echo "${total[@]}"
}

method:judge*and(){
#until there is one equal to the param, or use the first and hide it if there is no params
#line count should be there, to read everything in before next call
#mixers can just add line count together, but it will become cached, a add to next symbol is ok

}

method:judge*sequence(){
#excute one by one, without and
}

method:judge*rearrange(){

}

parse(){

}

get(){





}
#remote processes should be supported

ignore(){


}

db_search(){

}

commander(){
#commander resource in out session
#an advanced controller using suspend and kill -18 is better
totalprocess="${5:-$processcount}"
usedprocess="$totalprocess"
processes=()
#external resources should be allowed
for ((i=0;i<usedprocess;i++))
  do echo -n r>&4; done
while ((${#processes}<totalprocess))
  do process[${#processes}]=""; done

clear=0

while [ "$clear" = "0" -o "${#processes}" != "$totalprocess" ]; do
  echo -n r >&10
  read cmd <&8
  case "$cmd" in
    f|f\ *)process[${#processes}]="${cmd:2}"
      [ "${#processes}" = "$totalprocess" ]&&echo -n "-" >&11
      [ "$clear" = "0" ]&&echo -n r>&4
      echo ok>&9;;
    n|n\ *)echo "s ${process[${#processes}-1]}">&9
      [ "${#processes}" = "$totalprocess" ]&&echo -n "+" >&11
      unset process[${#processes}-1];;
    halt|halt\ *)echo "exit" >&9; break;;
    clear|clear\ *)echo "ok"; clear=1;;
    *)echo "error" >&9;;
  esac
done

} 4>"${1:-/dev/fd/4}" 8<"${2:-/dev/fd/8}" 9>"${3:-/dev/fd/9}" 10>"${4:-/dev/fd/10}"

processmessage(){

}

processcount=10

{
commander&

get

#total commander, wait all assigned processes to exit
count=0
while read -n 1 a <&11
  if [ "$a" = "+" ]
    then ((++count))
    else ((--count))
  fi; do :; done
#clear
read -n 1 <&10
echo halt >&8
read <&9
wait
} 4<> >(:) 8<> >(:) 9<> >(:) 10<> >(:) 11<> >(:)


exit 0

